import * as amqplib from 'amqplib';
import { RabbitMQConfig } from '../rabbitmq.interfaces';
export interface CorrelationMessage {
    correlationId: string;
    message: {};
}
export interface MessageOptions {
    exchange: string;
    routingKey: string;
    queue?: string;
}
export declare class AmqpConnection {
    private messageSubject;
    private _connection;
    private _channel;
    private config;
    constructor(config: RabbitMQConfig);
    readonly channel: amqplib.Channel;
    readonly connection: amqplib.Connection;
    init(): Promise<void>;
    request<T extends {}>(messageOptions: MessageOptions, payload: {}): Promise<T>;
    createSubscriber<T>(handler: (msg: T) => Promise<void>, msgOptions: MessageOptions): Promise<void>;
    createRpc<T, U>(handler: (msg: T) => Promise<U>, msgOptions: MessageOptions): Promise<void>;
    publish(exchange: string, routingKey: string, message: {}, options?: amqplib.Options.Publish): void;
    private initDirectReplyQueue;
}
//# sourceMappingURL=AmqpConnection.d.ts.map