import * as amqplib from 'amqplib';
export interface RabbitMQExchangeConfig {
    name: string;
    type?: string;
    options?: amqplib.Options.AssertExchange;
}
export interface MessageOptions {
    exchange: string;
    routingKey: string;
}
export interface RequestOptions {
    exchange: string;
    routingKey: string;
    timeout?: number;
    payload?: any;
}
export interface QueueOptions {
    exclusive?: boolean;
    durable?: boolean;
    autoDelete?: boolean;
    arguments?: any;
    messageTtl?: number;
    expires?: number;
    deadLetterExchange?: string;
    deadLetterRoutingKey?: string;
    maxLength?: number;
    maxPriority?: number;
}
export declare enum MessageHandlerErrorBehavior {
    ACK = 0,
    NACK = 1,
    REQUEUE = 2
}
export interface MessageHandlerOptions {
    exchange: string;
    routingKey: string;
    queue?: string;
    queueOptions?: QueueOptions;
    errorBehavior?: MessageHandlerErrorBehavior;
}
export interface RabbitMQConfig {
    uri: string;
    prefetchCount?: number;
    exchanges?: RabbitMQExchangeConfig[];
    defaultRpcTimeout?: number;
    defaultExchangeType?: string;
    defaultRpcErrorBehavior?: MessageHandlerErrorBehavior;
    defaultSubscribeErrorBehavior?: MessageHandlerErrorBehavior;
}
export declare type RabbitHandlerType = 'rpc' | 'subscribe';
export interface RabbitHandlerConfig extends MessageHandlerOptions {
    type: RabbitHandlerType;
}
//# sourceMappingURL=rabbitmq.interfaces.d.ts.map